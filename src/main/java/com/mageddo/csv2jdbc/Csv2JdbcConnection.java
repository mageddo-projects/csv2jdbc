package com.mageddo.csv2jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Locale;

import lombok.extern.slf4j.Slf4j;

@Slf4j
public class Csv2JdbcConnection extends ProxiedConnection {
  public Csv2JdbcConnection(Connection delegate) {
    super(delegate);
  }

  @Override
  public PreparedStatement prepareStatement(String sql) throws SQLException {
    if(isCsv2JCopy(sql)){
      return CopyCsvStatement.of(sql, this.delegate);
    }
    return super.prepareStatement(sql);
  }

  @Override
  public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
    if(isCsv2JCopy(sql)){
      return CopyCsvStatement.of(sql, this.delegate);
    }
    return super.prepareStatement(sql, columnIndexes);
  }

  @Override
  public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
    if(isCsv2JCopy(sql)){
      return CopyCsvStatement.of(sql, this.delegate);
    }
    return super.prepareStatement(sql, autoGeneratedKeys);
  }

  @Override
  public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
    if(isCsv2JCopy(sql)){
      return CopyCsvStatement.of(sql, this.delegate);
    }
    return super.prepareStatement(sql, columnNames);
  }

  @Override
  public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
    if(isCsv2JCopy(sql)){
      return CopyCsvStatement.of(sql, this.delegate);
    }
    return super.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
  }

  @Override
  public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
    if(isCsv2JCopy(sql)){
      return CopyCsvStatement.of(sql, this.delegate);
    }
    return super.prepareStatement(sql, resultSetType, resultSetConcurrency);
  }

  static boolean isCsv2JCopy(String sql) {
    return sql
        .trim()
        .toUpperCase(Locale.ENGLISH)
        .startsWith("CSV2J COPY");
  }

}
