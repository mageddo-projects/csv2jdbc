package com.mageddo.csv2jdbc;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

public class ProxiedStatement implements Statement  {

  private final Statement delegate;

  public ProxiedStatement(Statement delegate) {
    this.delegate = delegate;
  }

  @Override
  public ResultSet executeQuery(String sql) throws SQLException {
    return this.delegate.executeQuery(sql);
  }

  @Override
  public int executeUpdate(String sql) throws SQLException {
    return this.delegate.executeUpdate(sql);
  }

  @Override
  public void close() throws SQLException {
    this.delegate.close();
  }

  @Override
  public int getMaxFieldSize() throws SQLException {
    return this.delegate.getMaxFieldSize();
  }

  @Override
  public void setMaxFieldSize(int max) throws SQLException {
    this.delegate.setMaxFieldSize(max);
  }

  @Override
  public int getMaxRows() throws SQLException {
    return this.delegate.getMaxRows();
  }

  @Override
  public void setMaxRows(int max) throws SQLException {
    this.delegate.setMaxRows(max);
  }

  @Override
  public void setEscapeProcessing(boolean enable) throws SQLException {
    this.delegate.setEscapeProcessing(enable);
  }

  @Override
  public int getQueryTimeout() throws SQLException {
    return this.delegate.getQueryTimeout();
  }

  @Override
  public void setQueryTimeout(int seconds) throws SQLException {
    this.delegate.setQueryTimeout(seconds);
  }

  @Override
  public void cancel() throws SQLException {
    this.delegate.cancel();
  }

  @Override
  public SQLWarning getWarnings() throws SQLException {
    return this.delegate.getWarnings();
  }

  @Override
  public void clearWarnings() throws SQLException {
    this.delegate.clearWarnings();
  }

  @Override
  public void setCursorName(String name) throws SQLException {
    this.delegate.setCursorName(name);
  }

  @Override
  public boolean execute(String sql) throws SQLException {
    return this.delegate.execute(sql);
  }

  @Override
  public ResultSet getResultSet() throws SQLException {
    return this.delegate.getResultSet();
  }

  @Override
  public int getUpdateCount() throws SQLException {
    return this.delegate.getUpdateCount();
  }

  @Override
  public boolean getMoreResults() throws SQLException {
    return this.delegate.getMoreResults();
  }

  @Override
  public void setFetchDirection(int direction) throws SQLException {
    this.delegate.setFetchDirection(direction);
  }

  @Override
  public int getFetchDirection() throws SQLException {
    return this.delegate.getFetchDirection();
  }

  @Override
  public void setFetchSize(int rows) throws SQLException {
    this.delegate.setFetchSize(rows);
  }

  @Override
  public int getFetchSize() throws SQLException {
    return this.delegate.getFetchSize();
  }

  @Override
  public int getResultSetConcurrency() throws SQLException {
    return this.delegate.getResultSetConcurrency();
  }

  @Override
  public int getResultSetType() throws SQLException {
    return this.delegate.getResultSetType();
  }

  @Override
  public void addBatch(String sql) throws SQLException {
    this.delegate.addBatch(sql);
  }

  @Override
  public void clearBatch() throws SQLException {
    this.delegate.clearBatch();
  }

  @Override
  public int[] executeBatch() throws SQLException {
    return this.delegate.executeBatch();
  }

  @Override
  public Connection getConnection() throws SQLException {
    return this.delegate.getConnection();
  }

  @Override
  public boolean getMoreResults(int current) throws SQLException {
    return this.delegate.getMoreResults(current);
  }

  @Override
  public ResultSet getGeneratedKeys() throws SQLException {
    return this.delegate.getGeneratedKeys();
  }

  @Override
  public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
    return this.delegate.executeUpdate(sql, autoGeneratedKeys);
  }

  @Override
  public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
    return this.delegate.executeUpdate(sql, columnIndexes);
  }

  @Override
  public int executeUpdate(String sql, String[] columnNames) throws SQLException {
    return this.delegate.executeUpdate(sql, columnNames);
  }

  @Override
  public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
    return this.delegate.execute(sql, autoGeneratedKeys);
  }

  @Override
  public boolean execute(String sql, int[] columnIndexes) throws SQLException {
    return this.delegate.execute(sql, columnIndexes);
  }

  @Override
  public boolean execute(String sql, String[] columnNames) throws SQLException {
    return this.delegate.execute(sql, columnNames);
  }

  @Override
  public int getResultSetHoldability() throws SQLException {
    return this.delegate.getResultSetHoldability();
  }

  @Override
  public boolean isClosed() throws SQLException {
    return this.delegate.isClosed();
  }

  @Override
  public void setPoolable(boolean poolable) throws SQLException {
    this.delegate.setPoolable(poolable);
  }

  @Override
  public boolean isPoolable() throws SQLException {
    return this.delegate.isPoolable();
  }

  @Override
  public void closeOnCompletion() throws SQLException {
    this.delegate.closeOnCompletion();
  }

  @Override
  public boolean isCloseOnCompletion() throws SQLException {
    return this.delegate.isCloseOnCompletion();
  }

  @Override
  public <T> T unwrap(Class<T> iface) throws SQLException {
    return this.delegate.unwrap(iface);
  }

  @Override
  public boolean isWrapperFor(Class<?> iface) throws SQLException {
    return this.delegate.isWrapperFor(iface);
  }
}
