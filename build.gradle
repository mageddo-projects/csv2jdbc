plugins {
  // Apply the java-library plugin for API and implementation separation.
  id 'java-library'
  id "antlr"
  id "com.github.johnrengelman.shadow" version "7.1.2"
}

apply from: "${rootDir}/nexus.gradle"

repositories {
  // Use Maven Central for resolving dependencies.
  mavenCentral()
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

dependencies {

  antlr("org.antlr:antlr4:4.11.1")

  api("org.antlr:antlr4-runtime:4.11.1")

  compileOnly 'org.projectlombok:lombok:1.18.24'
  annotationProcessor 'org.projectlombok:lombok:1.18.24'

  implementation group: 'com.mageddo.commons-jdbc', name: 'commons-jdbc', version: '0.1.3'

  implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.6'
  implementation group: 'org.apache.commons', name: 'commons-csv', version: '1.9.0'

  testCompileOnly 'org.projectlombok:lombok:1.18.24'
  testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.1'
  testImplementation 'org.jdbi:jdbi3-core:3.36.0'

  testImplementation group: 'com.h2database', name: 'h2', version: '2.1.214'
  testImplementation group: 'org.postgresql', name: 'postgresql', version: '9.4.1212'
  testImplementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'

}

tasks.named('test') {
  // Use junit platform for unit tests.
  useJUnitPlatform()
}

compileTestJava {
  sourceCompatibility = JavaVersion.VERSION_17
  targetCompatibility = JavaVersion.VERSION_17
}

shadowJar {
  archiveFileName = "${project.name}-${project.version}.jar"
  dependencies {
    exclude(dependency('org.antlr:antlr4:'))
    exclude(dependency(':antlr-runtime:'))
    exclude(dependency(':ST4:'))
    exclude(dependency(':org.abego.treelayout.core:'))
    exclude(dependency(':javax.json:'))
    exclude(dependency(':icu4j:'))
  }
  relocate 'org.apache.commons.csv', 'com.mageddo.thirdparty.org.apache.commons.csv'
}
assemble.dependsOn shadowJar

generateGrammarSource {
  outputDirectory = file("${outputDirectory}/com/mageddo/antlr")
//  arguments += ['-package', 'org.mellowd.compiler']
}

processResources {
  filesMatching('**/info.properties') {
    expand(project.properties)
  }
}
